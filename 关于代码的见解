    对于一个优秀的编程人员来说，代码是一种艺术。它不仅仅是简单的一串串的符号和文字，更是他们的创造与智慧的结晶，能够编写优秀的代
码是成为一个合格的软件开发人员的基础。关于代码，我有以下见解：
 
  ①代码是程序员之间交流和传承的一种方式，关于代码第一点见解：具有良好的可阅读性。不管我们的学习能力如何，编写的代码总会有人阅读，
老师也好，同事也好，领导也好，客户也好，在阅读的时候不能让别人产生“见码立崩溃”的感觉。如果你在阅读别人的代码时发现是杂乱无章的，
你会有心情看完吗？同样的道理，我们在写代码的时候就要养成好习惯，比如良好的编程风格、注释风格、漂亮的格式···所以这就促使现阶段的我
们要揣摩代码，平时就要养成好习惯。
 
  ②代码中的命名。代码中有许多的变量、参数、函数、类等等许多需要命名的地方，如果命名不当或者胡乱命名会产生什么影响？看一段代码
    public int a(int b, int c) {
      int d = 0;
      int e = b < c? b:c;
      for(int i = e; i > 0; i--) {
        boolean m = false;
        if(b % i == 0 && c % i == 0) {
          m = true;
          d = i;
        }
        if(m) 
          break;
      }
      return d;
    }
这样的代码如果乍一看根本看不懂作者想表达的意图，我们根据前后逻辑和语境猜测和验证后才知道，原来是求两个数的最大公约数。这只是非常
简单一段，试想如果一篇几千行的代码都这样你要花多久的时间才能理解完，相同的道理，你就应该知道了该如何写代码才能言简意赅，清晰明了。
尽量写清楚每一个变量代表的意思、区分相似意义的变量、遵循惯例、符合语法，这会对编写优质代码很有帮助。
  
  ③函数的写法。函数在代码中起到了相当重要的作用，代码都是由许多的类之间相互关联而一起完成某项功能，每一个类就是有许多函数构成。所
以说写函数时也有许多规则要考虑。
    第一点：函数功能尽量要单一。具体来说函数就是实现某些功能，如果编写一个函数给予了它太多功能，就可能导致错误。比如一个函数包含
两个功能，计算平均成绩和打分，在比赛的情况下我们只需计算出平均成绩而不需要打分，结果调用函数的时候同时产生了平均成绩和分数，那就
很尴尬了。所以函数的功能尽量单一。
    第二点：函数尽量要抽象到一个层次。这函数抽象的理解并不是数学上说的“抽象函数f(x)”，而是把做一件事的步骤给抽象到一个抽象层次上，
在实现这件事情时循序渐进，让大家都能够理解，能够知道结果是怎样产生的。
    第三点：函数长度不易过长。优秀的代码函数都不是很长，经过良好的分块，分级处理过后，代码就不会太长，而且太长的代码不易维护。
    第四点：什么时候该写函数。我觉得，基于函数的功能来说，我们需要一个功能的时候就需要抽象出一个函数，但也不能写太多函数，什么小
功能都抽象成函数。列如在许多函数中都重复出现的小功能、短代码，才应该抽象出来，这既减少了代码维护的困难也使代码更易阅读。

  ④写一个类。关于类是一个比较大的范围，不能很深入的说清楚。根据它的特点继承、多态、封装来说，合适的创建一个类或接口。
    （未完）
    
    
    
    
    
    
    
